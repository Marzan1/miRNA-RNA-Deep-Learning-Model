%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.7.0
%%CreationDate: Sat Aug 23 01:20:15 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: -d2 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCGGCUGUCACGUCUGCGGCUGUCACGUCUGCUAGGGGGUUGGGGGGUCCAGGAAGGGCAGCGAGU\
) } def
/len { sequence length } bind def

/coor [
[77.96945953 319.14575195]
[77.29648590 304.16082764]
[76.62351990 289.17593384]
[73.95348358 286.41094971]
[72.67626190 282.08401489]
[73.57410431 276.96261597]
[77.00537109 272.16217041]
[78.34996033 257.22253418]
[79.69454956 242.28292847]
[81.03913879 227.34332275]
[82.38372803 212.40370178]
[83.72831726 197.46408081]
[72.40881348 187.82008362]
[68.89707947 173.18684387]
[74.74365234 159.12728882]
[87.89993286 151.11364746]
[89.24452209 136.17402649]
[90.58911133 121.23442078]
[91.93370056 106.29480743]
[89.40206909 98.33933258]
[93.68853760 90.72021484]
[95.70203400 75.85596466]
[97.71553040 60.99171829]
[99.72903442 46.12747192]
[93.91419983 31.41359138]
[103.28990173 19.84010887]
[105.30339813 4.97586155]
[106.64798737 -9.96375275]
[107.32096100 -24.94864845]
[100.21059418 -39.08205795]
[108.51110840 -51.44938278]
[109.18408203 -66.43428040]
[109.85705566 -81.41917419]
[101.82676697 -95.71765137]
[110.42603302 -109.68134308]
[126.80866241 -108.94559479]
[134.12161255 -94.26728821]
[124.84194946 -80.74620056]
[124.16897583 -65.76130676]
[123.49600220 -50.77640915]
[130.65451050 -37.71482086]
[122.30585480 -24.27567673]
[121.63288116 -9.29078007]
[124.37152863 -5.01177454]
[124.21050262 1.09032393]
[120.16764069 6.98936081]
[118.15414429 21.85360718]
[124.11299896 35.50429916]
[114.59327698 48.14097214]
[112.57978058 63.00521851]
[110.56628418 77.86946106]
[108.55278015 92.73371124]
[106.87331390 107.63939667]
[105.52872467 122.57901001]
[104.18413544 137.51861572]
[102.83954620 152.45823669]
[114.35350800 162.69224548]
[117.59569550 177.56979370]
[111.52752686 191.34083557]
[98.66793060 198.80867004]
[97.32334137 213.74829102]
[95.97875214 228.68791199]
[94.63416290 243.62751770]
[93.28957367 258.56713867]
[91.94498444 273.50674438]
[91.60841370 288.50296021]
[92.28138733 303.48785400]
[92.95435333 318.47277832]
[96.00698090 337.61254883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[23 50]
[24 49]
[26 47]
[27 46]
[28 43]
[29 42]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
